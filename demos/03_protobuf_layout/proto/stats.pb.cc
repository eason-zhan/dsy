// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/stats.proto

#include "proto/stats.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
namespace ad {
PROTOBUF_CONSTEXPR Stats::Stats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bucket_)*/{}
  , /*decltype(_impl_._bucket_cached_byte_size_)*/{0}
  , /*decltype(_impl_.hour_bucket_)*/{}
  , /*decltype(_impl_._hour_bucket_cached_byte_size_)*/{0}
  , /*decltype(_impl_.acc_bucket_)*/{}
  , /*decltype(_impl_._acc_bucket_cached_byte_size_)*/{0}
  , /*decltype(_impl_.ts_)*/int64_t{0}
  , /*decltype(_impl_.show_)*/int64_t{0}
  , /*decltype(_impl_.click_)*/int64_t{0}
  , /*decltype(_impl_.cost_)*/int64_t{0}
  , /*decltype(_impl_.hour_show_)*/int64_t{0}
  , /*decltype(_impl_.hour_click_)*/int64_t{0}
  , /*decltype(_impl_.hour_cost_)*/int64_t{0}
  , /*decltype(_impl_.acc_show_)*/int64_t{0}
  , /*decltype(_impl_.acc_click_)*/int64_t{0}
  , /*decltype(_impl_.acc_cost_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatsDefaultTypeInternal() {}
  union {
    Stats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatsDefaultTypeInternal _Stats_default_instance_;
PROTOBUF_CONSTEXPR StatsOpt::StatsOpt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bucket_)*/{}
  , /*decltype(_impl_._bucket_cached_byte_size_)*/{0}
  , /*decltype(_impl_.hour_bucket_)*/{}
  , /*decltype(_impl_._hour_bucket_cached_byte_size_)*/{0}
  , /*decltype(_impl_.ts_)*/int64_t{0}
  , /*decltype(_impl_.show_)*/int64_t{0}
  , /*decltype(_impl_.click_)*/int64_t{0}
  , /*decltype(_impl_.cost_)*/int64_t{0}
  , /*decltype(_impl_.hour_show_)*/int64_t{0}
  , /*decltype(_impl_.hour_click_)*/int64_t{0}
  , /*decltype(_impl_.hour_cost_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatsOptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatsOptDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatsOptDefaultTypeInternal() {}
  union {
    StatsOpt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatsOptDefaultTypeInternal _StatsOpt_default_instance_;
}  // namespace ad
}  // namespace proto
static ::_pb::Metadata file_level_metadata_proto_2fstats_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proto_2fstats_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2fstats_2eproto = nullptr;

const uint32_t TableStruct_proto_2fstats_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ad::Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ad::Stats, _impl_.ts_),
  PROTOBUF_FIELD_OFFSET(::proto::ad::Stats, _impl_.show_),
  PROTOBUF_FIELD_OFFSET(::proto::ad::Stats, _impl_.click_),
  PROTOBUF_FIELD_OFFSET(::proto::ad::Stats, _impl_.cost_),
  PROTOBUF_FIELD_OFFSET(::proto::ad::Stats, _impl_.hour_show_),
  PROTOBUF_FIELD_OFFSET(::proto::ad::Stats, _impl_.hour_click_),
  PROTOBUF_FIELD_OFFSET(::proto::ad::Stats, _impl_.hour_cost_),
  PROTOBUF_FIELD_OFFSET(::proto::ad::Stats, _impl_.acc_show_),
  PROTOBUF_FIELD_OFFSET(::proto::ad::Stats, _impl_.acc_click_),
  PROTOBUF_FIELD_OFFSET(::proto::ad::Stats, _impl_.acc_cost_),
  PROTOBUF_FIELD_OFFSET(::proto::ad::Stats, _impl_.bucket_),
  PROTOBUF_FIELD_OFFSET(::proto::ad::Stats, _impl_.hour_bucket_),
  PROTOBUF_FIELD_OFFSET(::proto::ad::Stats, _impl_.acc_bucket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ad::StatsOpt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ad::StatsOpt, _impl_.ts_),
  PROTOBUF_FIELD_OFFSET(::proto::ad::StatsOpt, _impl_.show_),
  PROTOBUF_FIELD_OFFSET(::proto::ad::StatsOpt, _impl_.click_),
  PROTOBUF_FIELD_OFFSET(::proto::ad::StatsOpt, _impl_.cost_),
  PROTOBUF_FIELD_OFFSET(::proto::ad::StatsOpt, _impl_.hour_show_),
  PROTOBUF_FIELD_OFFSET(::proto::ad::StatsOpt, _impl_.hour_click_),
  PROTOBUF_FIELD_OFFSET(::proto::ad::StatsOpt, _impl_.hour_cost_),
  PROTOBUF_FIELD_OFFSET(::proto::ad::StatsOpt, _impl_.bucket_),
  PROTOBUF_FIELD_OFFSET(::proto::ad::StatsOpt, _impl_.hour_bucket_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::ad::Stats)},
  { 19, -1, -1, sizeof(::proto::ad::StatsOpt)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::ad::_Stats_default_instance_._instance,
  &::proto::ad::_StatsOpt_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2fstats_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021proto/stats.proto\022\010proto.ad\"\350\001\n\005Stats\022"
  "\n\n\002ts\030\001 \001(\003\022\014\n\004show\030\002 \001(\003\022\r\n\005click\030\003 \001(\003"
  "\022\014\n\004cost\030\004 \001(\003\022\021\n\thour_show\030\005 \001(\003\022\022\n\nhou"
  "r_click\030\006 \001(\003\022\021\n\thour_cost\030\007 \001(\003\022\020\n\010acc_"
  "show\030\010 \001(\003\022\021\n\tacc_click\030\t \001(\003\022\020\n\010acc_cos"
  "t\030\n \001(\003\022\016\n\006bucket\030\013 \003(\003\022\023\n\013hour_bucket\030\014"
  " \003(\003\022\022\n\nacc_bucket\030\r \003(\003\"\240\001\n\010StatsOpt\022\n\n"
  "\002ts\030\001 \001(\003\022\014\n\004show\030\002 \001(\003\022\r\n\005click\030\003 \001(\003\022\014"
  "\n\004cost\030\004 \001(\003\022\021\n\thour_show\030\005 \001(\003\022\022\n\nhour_"
  "click\030\006 \001(\003\022\021\n\thour_cost\030\007 \001(\003\022\016\n\006bucket"
  "\030\013 \003(\003\022\023\n\013hour_bucket\030\014 \003(\003b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_proto_2fstats_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fstats_2eproto = {
    false, false, 435, descriptor_table_protodef_proto_2fstats_2eproto,
    "proto/stats.proto",
    &descriptor_table_proto_2fstats_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_proto_2fstats_2eproto::offsets,
    file_level_metadata_proto_2fstats_2eproto, file_level_enum_descriptors_proto_2fstats_2eproto,
    file_level_service_descriptors_proto_2fstats_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fstats_2eproto_getter() {
  return &descriptor_table_proto_2fstats_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fstats_2eproto(&descriptor_table_proto_2fstats_2eproto);
namespace proto {
namespace ad {

// ===================================================================

class Stats::_Internal {
 public:
};

Stats::Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ad.Stats)
}
Stats::Stats(const Stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Stats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bucket_){from._impl_.bucket_}
    , /*decltype(_impl_._bucket_cached_byte_size_)*/{0}
    , decltype(_impl_.hour_bucket_){from._impl_.hour_bucket_}
    , /*decltype(_impl_._hour_bucket_cached_byte_size_)*/{0}
    , decltype(_impl_.acc_bucket_){from._impl_.acc_bucket_}
    , /*decltype(_impl_._acc_bucket_cached_byte_size_)*/{0}
    , decltype(_impl_.ts_){}
    , decltype(_impl_.show_){}
    , decltype(_impl_.click_){}
    , decltype(_impl_.cost_){}
    , decltype(_impl_.hour_show_){}
    , decltype(_impl_.hour_click_){}
    , decltype(_impl_.hour_cost_){}
    , decltype(_impl_.acc_show_){}
    , decltype(_impl_.acc_click_){}
    , decltype(_impl_.acc_cost_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ts_, &from._impl_.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.acc_cost_) -
    reinterpret_cast<char*>(&_impl_.ts_)) + sizeof(_impl_.acc_cost_));
  // @@protoc_insertion_point(copy_constructor:proto.ad.Stats)
}

inline void Stats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bucket_){arena}
    , /*decltype(_impl_._bucket_cached_byte_size_)*/{0}
    , decltype(_impl_.hour_bucket_){arena}
    , /*decltype(_impl_._hour_bucket_cached_byte_size_)*/{0}
    , decltype(_impl_.acc_bucket_){arena}
    , /*decltype(_impl_._acc_bucket_cached_byte_size_)*/{0}
    , decltype(_impl_.ts_){int64_t{0}}
    , decltype(_impl_.show_){int64_t{0}}
    , decltype(_impl_.click_){int64_t{0}}
    , decltype(_impl_.cost_){int64_t{0}}
    , decltype(_impl_.hour_show_){int64_t{0}}
    , decltype(_impl_.hour_click_){int64_t{0}}
    , decltype(_impl_.hour_cost_){int64_t{0}}
    , decltype(_impl_.acc_show_){int64_t{0}}
    , decltype(_impl_.acc_click_){int64_t{0}}
    , decltype(_impl_.acc_cost_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Stats::~Stats() {
  // @@protoc_insertion_point(destructor:proto.ad.Stats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Stats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bucket_.~RepeatedField();
  _impl_.hour_bucket_.~RepeatedField();
  _impl_.acc_bucket_.~RepeatedField();
}

void Stats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ad.Stats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bucket_.Clear();
  _impl_.hour_bucket_.Clear();
  _impl_.acc_bucket_.Clear();
  ::memset(&_impl_.ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.acc_cost_) -
      reinterpret_cast<char*>(&_impl_.ts_)) + sizeof(_impl_.acc_cost_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 click = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.click_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 cost = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 hour_show = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.hour_show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 hour_click = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.hour_click_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 hour_cost = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.hour_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 acc_show = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.acc_show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 acc_click = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.acc_click_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 acc_cost = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.acc_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 bucket = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_bucket(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_bucket(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 hour_bucket = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_hour_bucket(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 96) {
          _internal_add_hour_bucket(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 acc_bucket = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_acc_bucket(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 104) {
          _internal_add_acc_bucket(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ad.Stats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ts = 1;
  if (this->_internal_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_ts(), target);
  }

  // int64 show = 2;
  if (this->_internal_show() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_show(), target);
  }

  // int64 click = 3;
  if (this->_internal_click() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_click(), target);
  }

  // int64 cost = 4;
  if (this->_internal_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_cost(), target);
  }

  // int64 hour_show = 5;
  if (this->_internal_hour_show() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_hour_show(), target);
  }

  // int64 hour_click = 6;
  if (this->_internal_hour_click() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_hour_click(), target);
  }

  // int64 hour_cost = 7;
  if (this->_internal_hour_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_hour_cost(), target);
  }

  // int64 acc_show = 8;
  if (this->_internal_acc_show() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_acc_show(), target);
  }

  // int64 acc_click = 9;
  if (this->_internal_acc_click() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_acc_click(), target);
  }

  // int64 acc_cost = 10;
  if (this->_internal_acc_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_acc_cost(), target);
  }

  // repeated int64 bucket = 11;
  {
    int byte_size = _impl_._bucket_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          11, _internal_bucket(), byte_size, target);
    }
  }

  // repeated int64 hour_bucket = 12;
  {
    int byte_size = _impl_._hour_bucket_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          12, _internal_hour_bucket(), byte_size, target);
    }
  }

  // repeated int64 acc_bucket = 13;
  {
    int byte_size = _impl_._acc_bucket_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          13, _internal_acc_bucket(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ad.Stats)
  return target;
}

size_t Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ad.Stats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 bucket = 11;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.bucket_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._bucket_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 hour_bucket = 12;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.hour_bucket_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._hour_bucket_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 acc_bucket = 13;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.acc_bucket_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._acc_bucket_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 ts = 1;
  if (this->_internal_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ts());
  }

  // int64 show = 2;
  if (this->_internal_show() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_show());
  }

  // int64 click = 3;
  if (this->_internal_click() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_click());
  }

  // int64 cost = 4;
  if (this->_internal_cost() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cost());
  }

  // int64 hour_show = 5;
  if (this->_internal_hour_show() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_hour_show());
  }

  // int64 hour_click = 6;
  if (this->_internal_hour_click() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_hour_click());
  }

  // int64 hour_cost = 7;
  if (this->_internal_hour_cost() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_hour_cost());
  }

  // int64 acc_show = 8;
  if (this->_internal_acc_show() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_acc_show());
  }

  // int64 acc_click = 9;
  if (this->_internal_acc_click() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_acc_click());
  }

  // int64 acc_cost = 10;
  if (this->_internal_acc_cost() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_acc_cost());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Stats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stats::GetClassData() const { return &_class_data_; }


void Stats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Stats*>(&to_msg);
  auto& from = static_cast<const Stats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ad.Stats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bucket_.MergeFrom(from._impl_.bucket_);
  _this->_impl_.hour_bucket_.MergeFrom(from._impl_.hour_bucket_);
  _this->_impl_.acc_bucket_.MergeFrom(from._impl_.acc_bucket_);
  if (from._internal_ts() != 0) {
    _this->_internal_set_ts(from._internal_ts());
  }
  if (from._internal_show() != 0) {
    _this->_internal_set_show(from._internal_show());
  }
  if (from._internal_click() != 0) {
    _this->_internal_set_click(from._internal_click());
  }
  if (from._internal_cost() != 0) {
    _this->_internal_set_cost(from._internal_cost());
  }
  if (from._internal_hour_show() != 0) {
    _this->_internal_set_hour_show(from._internal_hour_show());
  }
  if (from._internal_hour_click() != 0) {
    _this->_internal_set_hour_click(from._internal_hour_click());
  }
  if (from._internal_hour_cost() != 0) {
    _this->_internal_set_hour_cost(from._internal_hour_cost());
  }
  if (from._internal_acc_show() != 0) {
    _this->_internal_set_acc_show(from._internal_acc_show());
  }
  if (from._internal_acc_click() != 0) {
    _this->_internal_set_acc_click(from._internal_acc_click());
  }
  if (from._internal_acc_cost() != 0) {
    _this->_internal_set_acc_cost(from._internal_acc_cost());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stats::CopyFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ad.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats::IsInitialized() const {
  return true;
}

void Stats::InternalSwap(Stats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bucket_.InternalSwap(&other->_impl_.bucket_);
  _impl_.hour_bucket_.InternalSwap(&other->_impl_.hour_bucket_);
  _impl_.acc_bucket_.InternalSwap(&other->_impl_.acc_bucket_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stats, _impl_.acc_cost_)
      + sizeof(Stats::_impl_.acc_cost_)
      - PROTOBUF_FIELD_OFFSET(Stats, _impl_.ts_)>(
          reinterpret_cast<char*>(&_impl_.ts_),
          reinterpret_cast<char*>(&other->_impl_.ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fstats_2eproto_getter, &descriptor_table_proto_2fstats_2eproto_once,
      file_level_metadata_proto_2fstats_2eproto[0]);
}

// ===================================================================

class StatsOpt::_Internal {
 public:
};

StatsOpt::StatsOpt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ad.StatsOpt)
}
StatsOpt::StatsOpt(const StatsOpt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatsOpt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bucket_){from._impl_.bucket_}
    , /*decltype(_impl_._bucket_cached_byte_size_)*/{0}
    , decltype(_impl_.hour_bucket_){from._impl_.hour_bucket_}
    , /*decltype(_impl_._hour_bucket_cached_byte_size_)*/{0}
    , decltype(_impl_.ts_){}
    , decltype(_impl_.show_){}
    , decltype(_impl_.click_){}
    , decltype(_impl_.cost_){}
    , decltype(_impl_.hour_show_){}
    , decltype(_impl_.hour_click_){}
    , decltype(_impl_.hour_cost_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ts_, &from._impl_.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hour_cost_) -
    reinterpret_cast<char*>(&_impl_.ts_)) + sizeof(_impl_.hour_cost_));
  // @@protoc_insertion_point(copy_constructor:proto.ad.StatsOpt)
}

inline void StatsOpt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bucket_){arena}
    , /*decltype(_impl_._bucket_cached_byte_size_)*/{0}
    , decltype(_impl_.hour_bucket_){arena}
    , /*decltype(_impl_._hour_bucket_cached_byte_size_)*/{0}
    , decltype(_impl_.ts_){int64_t{0}}
    , decltype(_impl_.show_){int64_t{0}}
    , decltype(_impl_.click_){int64_t{0}}
    , decltype(_impl_.cost_){int64_t{0}}
    , decltype(_impl_.hour_show_){int64_t{0}}
    , decltype(_impl_.hour_click_){int64_t{0}}
    , decltype(_impl_.hour_cost_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StatsOpt::~StatsOpt() {
  // @@protoc_insertion_point(destructor:proto.ad.StatsOpt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatsOpt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bucket_.~RepeatedField();
  _impl_.hour_bucket_.~RepeatedField();
}

void StatsOpt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatsOpt::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ad.StatsOpt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bucket_.Clear();
  _impl_.hour_bucket_.Clear();
  ::memset(&_impl_.ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hour_cost_) -
      reinterpret_cast<char*>(&_impl_.ts_)) + sizeof(_impl_.hour_cost_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatsOpt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 click = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.click_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 cost = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 hour_show = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.hour_show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 hour_click = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.hour_click_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 hour_cost = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.hour_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 bucket = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_bucket(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_bucket(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 hour_bucket = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_hour_bucket(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 96) {
          _internal_add_hour_bucket(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatsOpt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ad.StatsOpt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ts = 1;
  if (this->_internal_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_ts(), target);
  }

  // int64 show = 2;
  if (this->_internal_show() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_show(), target);
  }

  // int64 click = 3;
  if (this->_internal_click() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_click(), target);
  }

  // int64 cost = 4;
  if (this->_internal_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_cost(), target);
  }

  // int64 hour_show = 5;
  if (this->_internal_hour_show() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_hour_show(), target);
  }

  // int64 hour_click = 6;
  if (this->_internal_hour_click() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_hour_click(), target);
  }

  // int64 hour_cost = 7;
  if (this->_internal_hour_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_hour_cost(), target);
  }

  // repeated int64 bucket = 11;
  {
    int byte_size = _impl_._bucket_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          11, _internal_bucket(), byte_size, target);
    }
  }

  // repeated int64 hour_bucket = 12;
  {
    int byte_size = _impl_._hour_bucket_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          12, _internal_hour_bucket(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ad.StatsOpt)
  return target;
}

size_t StatsOpt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ad.StatsOpt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 bucket = 11;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.bucket_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._bucket_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 hour_bucket = 12;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.hour_bucket_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._hour_bucket_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 ts = 1;
  if (this->_internal_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ts());
  }

  // int64 show = 2;
  if (this->_internal_show() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_show());
  }

  // int64 click = 3;
  if (this->_internal_click() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_click());
  }

  // int64 cost = 4;
  if (this->_internal_cost() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cost());
  }

  // int64 hour_show = 5;
  if (this->_internal_hour_show() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_hour_show());
  }

  // int64 hour_click = 6;
  if (this->_internal_hour_click() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_hour_click());
  }

  // int64 hour_cost = 7;
  if (this->_internal_hour_cost() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_hour_cost());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatsOpt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatsOpt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatsOpt::GetClassData() const { return &_class_data_; }


void StatsOpt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatsOpt*>(&to_msg);
  auto& from = static_cast<const StatsOpt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ad.StatsOpt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bucket_.MergeFrom(from._impl_.bucket_);
  _this->_impl_.hour_bucket_.MergeFrom(from._impl_.hour_bucket_);
  if (from._internal_ts() != 0) {
    _this->_internal_set_ts(from._internal_ts());
  }
  if (from._internal_show() != 0) {
    _this->_internal_set_show(from._internal_show());
  }
  if (from._internal_click() != 0) {
    _this->_internal_set_click(from._internal_click());
  }
  if (from._internal_cost() != 0) {
    _this->_internal_set_cost(from._internal_cost());
  }
  if (from._internal_hour_show() != 0) {
    _this->_internal_set_hour_show(from._internal_hour_show());
  }
  if (from._internal_hour_click() != 0) {
    _this->_internal_set_hour_click(from._internal_hour_click());
  }
  if (from._internal_hour_cost() != 0) {
    _this->_internal_set_hour_cost(from._internal_hour_cost());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatsOpt::CopyFrom(const StatsOpt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ad.StatsOpt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsOpt::IsInitialized() const {
  return true;
}

void StatsOpt::InternalSwap(StatsOpt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bucket_.InternalSwap(&other->_impl_.bucket_);
  _impl_.hour_bucket_.InternalSwap(&other->_impl_.hour_bucket_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatsOpt, _impl_.hour_cost_)
      + sizeof(StatsOpt::_impl_.hour_cost_)
      - PROTOBUF_FIELD_OFFSET(StatsOpt, _impl_.ts_)>(
          reinterpret_cast<char*>(&_impl_.ts_),
          reinterpret_cast<char*>(&other->_impl_.ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatsOpt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fstats_2eproto_getter, &descriptor_table_proto_2fstats_2eproto_once,
      file_level_metadata_proto_2fstats_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ad
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::ad::Stats*
Arena::CreateMaybeMessage< ::proto::ad::Stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ad::Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ad::StatsOpt*
Arena::CreateMaybeMessage< ::proto::ad::StatsOpt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ad::StatsOpt >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
